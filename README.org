* doom-emacs-config

[[https://github.com/hlissner/doom-emacs][Doom]] is faster than [[https://www.const.no/init][my personal Emacs config]]. I want to know if it's worth it to
switch. There's a lot of similarities with my config.

#+BEGIN_QUOTE
After 30+ years of using Emacs, I'm more than happy to use a distro with a well
curated set of built-in packages, and a clear set of config mechanisms. Also the
startup time! I was happy with my handcrafted config when I got <10s, with Doom
I get ~1.5s and a lot more functionality ready to go. Amazing.
#+END_QUOTE

Doom uses =straight.el= and =general.el= under the hood. They are actually
hiding behind =package!= and =map!=. One improvement over my config is that
=straight.el= is used outside of Emacs itself - with the =doom install= CLI
command. I like this a lot - especially since I would never bother to do that
myself.

It seems easier to pin packages with Doom. I just use the =package!= with the
=:pin= property. I was never a big fan of how =straight-freeze-versions= and
=straight-thaw-versions= worked or [[https://github.com/raxod502/straight.el#how-do-i-pin-package-versions-or-use-only-tagged-releases][how pinning packages is described in the
=straight.el= README]]. I assume Doom does something clever to keep everything
under control. To bump a package pin, run =doom/bump-package-at-point= while the
cursor is on a =package!= expression. Again, something I would never had
implemented myself.

As always, =use-package!= is used for configuring packages. However, I am not
really able to use the =:general= property as before so I opted to combine
=:init= with =map!=. Although one might argue that =:map= should not be a part
of the =use-package!= declaration if you consider [[https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/%2Bevil-bindings.el#L254][+evil-bindings.el]]. Perhaps you
should rather create your own =config= module. The downside to that is that you
could have keybindings to packages that may not be installed.

#+BEGIN_QUOTE
=use-package!= is a thin wrapper around `use-package' it is required that you
use this in Doom's modules, but not required to be used in your private config
#+END_QUOTE

It is important to note that omitting =:defer=, =:hook=, =:commands= or =:after=
will make your package load immediately. This is bad for Doom's startup time.

I like how =!map= hides away the complexities of =general.el= when you want to
use leader keys. You get sane defaults with a pleasant wrapper.

I am unsure how to best utilize the =after!= function for configuring packages.
I may have to move things away from =use-package!='s =:config= property to
=after!= instead.

The =after!= macro just expands to =eval-after-load=.

It's pretty cool to have a community around your Emacs configuration. There is a
friendly and active Discord community.

#+BEGIN_QUOTE
Hop on our [[https://discord.gg/qvGgnVx][Discord server]] and say hi! Help others, hang out or talk to me about
Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you
like. Nourish this lonely soul.
#+END_QUOTE


** Discoveries

=aya-create= with =aya-expand= is very useful:

#+BEGIN_SRC js
count_of_~red = get_total("~red");
#+END_SRC

=aya-persist-snippet= wil save whatever is currently in =aya-current=.

=org-re-reveal= is set up to download the JS files locally. Great!

#+BEGIN_SRC
#+REVEAL_EXTRA_CSS: url-to-custom-stylesheet.css
#+END_SRC

** What is a module?

A module is something you can tell Doom to load by listing the module name in
=init.el=.

A module can have a =packages.el= and a =config.el=, so: only use =package!= in
the former and =use-package!= in the latter. =use-package!= is formerly known as
=def-package!= (which is deprecated).

#+BEGIN_QUOTE
Doom consists of around 160 modules and growing. A Doom module is a bundle of
packages, configuration and commands, organized into a unit that can be toggled
easily by tweaking your =doom!= block (found in =$DOOMDIR/init.el=).
#+END_QUOTE

You can think of your =$DOOMDIR= kind of like a Doom module.

=package!= is declarative: meant only for telling Doom what this module's
dependencies are (and optionally, where to find them).

=!map= is a convenience macro for defining keybinds, powered by =general.el=.

The canonical way to reconfigure packages is with =(after! PACKAGE ...)=.

** Inspiration

- https://github.com/jethrokuan/blog/blob/master/org/migrating_to_doom_emacs.org
- https://github.com/a13/emacs.d
  - Uses =use-package= very well
- [ ] Steal this https://github.com/ianpan870102/.personal-emacs.d/blob/master/init.el#L77
  - Uses =use-package= very well
- https://github.com/ianpan870102/yay-evil-emacs
  - Steal a lot
- [[https://www.ianjones.us/zaiste-programming-doom-emacs-tutorial][Doom Emacs Zaiste Programming Tutorial]]
- [[https://github.com/tecosaur/emacs-config][GitHub - tecosaur/emacs-config: My configuration for Doom Emacs]]
- [[https://github.com/rschmukler/doom.d][GitHub - rschmukler/doom.d: My Emacs Doom Config]]
- [[https://github.com/ztlevi/doom-config][GitHub - ztlevi/doom-config: Blazing fast Doom Emacs private configuration]]
- [[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]]
- [[https://github.com/niklascarlsson/doom-private][GitHub - niklascarlsson/doom-private: My private module with tweaks for the Emacs Doom]]
- [[https://github.com/niklascarlsson/dotfiles][GitHub - niklascarlsson/dotfiles: My dotfiles]]
- [[https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org][emacs/doom.d/config.org · master · Justine Kizhakkinedath / dotfiles · GitLab]]
- [[https://github.com/Brettm12345/doom-emacs-literate-config/blob/master/config.org][doom-emacs-literate-config/config.org]]

** TODO Implement stuff

- [X] Add =reformatter.el=
- [ ] Add reformatter hooks
- [X] Treemacs should use =.gitignore= to hide files
- [X] Add =tmux= pane dump function
- [X] Add the package for =zoom-mode=
- [X] Add =ox-hugo=
- [X] Add =org-roam=
- [X] Open with =mpv= from =dired=

Here is a code block:

#+BEGIN_SRC emacs-lisp
(message "hello")
#+END_SRC

#+RESULTS:
: hello

** TODO Notes

*** Good

Doom uses =straight.el= and =general.el= under the hood. They are hiding behind:

- =package!=
- =map!=

Packages are not updated on startup - you have to run =doom sync= from your CLI
to invoke it. They pin every package to a hash. I like that. It is better than
what I had. =doom sync= even supports literate configs. I like that the pinning
is done in =packages.el= of the module.

I like that the docs mention [[https://github.com/hlissner/doom-emacs/tree/develop/modules/config/literate#modularizing-your-literate-config-with-include-directives][include directives]].

I already found stuff for =tmux= I was about to create in my own config:

- =+tmux/cd-to-here=
- =+tmux/send-region=

See [[https://github.com/hlissner/doom-emacs/blob/develop/modules/tools/tmux/autoload/tmux.el][/modules/tools/tmux]].

The exploration has already paid for itself.

I like having =tmux= running in a WM scratchpad.

=magit= seems to work fine (=SPC g g=). I like that it goes into fullscreen.

I like the way it make Emacs look.

I like that navigating Org files is snappy. In my config, cycling with =TAB= is
somewhat slow.

I like that you can switch themes on the fly without breaking all the colors
everything.

I like the =doom-one-light= theme.

I like that =magit= commit goes straight into insert mode and I can =C-c C-c=
without leaving insert mode.

I like all the custom link types included with Org mode.

=(dired +icons)= is nice.

I like the concept of modules and feature flags.

I like =SPC t z= (toggle zen) for =writeroom-mode= but I am not a big fan of the fonts
being used.

*** Bad

Scrolling issues on Mac OS - https://github.com/hlissner/doom-emacs/issues/2217

I wish I knew how to create my own modules and features.

I don't understand why =SPC n d= is mapped to =deft=, but =deft= is not
installed.

I don't like how the Python Language Server works out of the box.

I don't like all the keybindings, so I have to figure out how to change them. I
don't know how to change them and the documentation assumes I understand the
Doom structure. It should be fine once I look at some configs from other people.

I don't understand how to cleanly add a package.

I don't understand how to cleanly change settings and keybindings for included
packages.

I don't think I need line numbers.

Definition of *clean*: To follow the same organizational principles that Doom
employs. The whole reason for switching to Doom is to adopt a clean architecture
that improves on what I already have.
