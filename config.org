#+HUGO_BASE_DIR: ./docs
#+HUGO_SECTION: ./

* Hugo

- If =HUGO_SECTION= is =blog= then the file is placed in
  =<HUGO_BASE_DIR>/content/blog=.
- If =HUGO_SECTION= is =./= then the file is placed in
  =<HUGO_BASE_DIR>/content/=
- If =HUGO_SECTION= is unset then the file is placed in
  =<HUGO_BASE_DIR>/content/posts/=.

* Doom Emacs config
:PROPERTIES:
:EXPORT_FILE_NAME: index
:END:

** Doom Emacs

This is my [[https://github.com/doomemacs/doomemacs][Doom Emacs]] configuration.

** Lexical binding

Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).

#+BEGIN_SRC elisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

** General

#+begin_src elisp
(setq user-full-name "Anders K. Pettersen"
      user-mail-address "staticaland@users.noreply.github.com")
#+end_src


** Projectile

Projectile is my favourite way to work with projects.

#+BEGIN_SRC elisp
(after! projectile
  (setq +workspaces-on-switch-project-behavior t)

  (setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
  (defun projectile-ignored-project-function (filepath)
      "Return t if FILEPATH is within any of `projectile-ignored-projects'"
      (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects))))
#+END_SRC


** Dired file explorer

#+BEGIN_SRC elisp
(after! dired

  (add-hook! 'dired-mode-hook 'dired-hide-details-mode)
  (add-hook! 'dired-mode-hook 'hl-line-mode)

  (if (executable-find "gls")
      (progn
        (setq insert-directory-program "gls")
        (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
    (setq dired-listing-switches "-ahlF"))

  (setq ls-lisp-dirs-first t)

  (setq dired-listing-switches "-lat") ; sort by date (new first)
  (put 'dired-find-alternate-file 'disabled nil)

  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (setq dired-recursive-copies (quote always))
  (setq dired-recursive-deletes (quote top)))
#+END_SRC


** CUE

[[https://cuelang.org/][CUE]].

#+begin_src elisp
(add-hook! cue-mode
  (cuefmt-on-save-mode))
#+end_src


** Go

[[https://go.dev/][Go]].

#+begin_src elisp
(add-hook! go-mode
  (gofmt-on-save-mode))
#+end_src


** Terraform

[[https://www.terraform.io/][Terraform]].

#+begin_src elisp
(add-hook! terraform-mode
  (terraform-format-on-save-mode))
#+end_src


** Org

[[https://orgmode.org/][Org Mode]].

#+begin_src elisp
(after! org
  (setq org-imenu-depth 7)
  (setq org-ellipsis " ▾ ")
  (setq org-superstar-headline-bullets-list '("⁖"))
  (setq org-babel-python-command "python3")
  (setq org-cycle-separator-lines 1)
  (setq org-edit-src-content-indentation 0)
  (setq org-export-initial-scope 'subtree)
  (setq org-image-actual-width 400)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-indented t))
#+end_src

Add =ox-gfm= to make it possible to export Org Mode documents to GitHub
Flavoured Markdown.

#+begin_src elisp
(use-package! ox-gfm
  :after org)
#+end_src


** Treemacs file tree

#+begin_src elisp
(use-package! treemacs
  :commands treemacs
  :init
    (map! :leader
      (:prefix ("f" . "file")
        :desc "Open Treemacs" "t" #'+treemacs/toggle))
  :config
  (treemacs-git-mode 'extended)
  (setq treemacs-is-never-other-window nil)
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+end_src


** Outline

#+begin_src elisp
(use-package! outline
  :config
  (setq outline-blank-line t))
#+end_src


** Occur

#+begin_src elisp
(use-package! replace
  :init
    (map! :map occur-mode-map
      :n  "e" 'occur-edit-mode)

  (add-hook 'occur-hook
          '(lambda ()
             (switch-to-buffer-other-window "*Occur*"))))
#+end_src


** JSON schema

#+begin_src elisp :tangle no
(after! lsp-mode
  (setq lsp-yaml-schemas (make-hash-table))
  (puthash "https://ecs-intellisense.s3-us-west-2.amazonaws.com/task-definition/schema.json" ["*ecs-task-def.json" "task-definition.json"] lsp-yaml-schemas))
#+end_src


** Modes

I used this while making [[https://pkg.go.dev/html/template][Go HTTP templates]] while reading [[https://lets-go.alexedwards.net/][Let's Go]].

#+begin_src elisp
(use-package web-mode
  :mode (("\\.html$" . web-mode)
         ("\\.tmpl\\'" . web-mode)))
#+end_src

#+begin_src elisp
(add-hook! web-mode
  (prettier-on-save-mode))
#+end_src


** Various

There is nothing here yet.
