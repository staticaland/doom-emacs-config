#+TITLE: Config

* Base settings

Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).

#+BEGIN_SRC elisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

** Personal Information

It's useful to have some basic personal information

#+BEGIN_SRC elisp
(setq user-full-name "Anders K. Pettersen"
      user-mail-address "john@doe.com")
#+END_SRC

What Doom wants me to set.

#+BEGIN_SRC elisp
(setq doom-theme 'modus-operandi)

(setq display-line-numbers-type nil)

(setq doom-theme 'modus-operandi)
#+END_SRC


** Base typeface configurations

#+BEGIN_SRC elisp
(setq doom-variable-pitch-font (font-spec :family "EtBembo" :size 18))
(setq doom-themes-treemacs-enable-variable-pitch nil)

(when (string= (system-name) "Anderss-MacBook-Pro.local")
  (setq doom-font (font-spec :family "Menlo" :size 15)
        doom-big-font-increment 8
        doom-variable-pitch-font (font-spec :family "EtBembo" :size 22))
  (font-put doom-font :weight 'semi-light))
#+END_SRC


* General movements and motions

Ok.

** Evil-snipe

#+BEGIN_SRC elisp
(after! evil-snipe
  (setq evil-snipe-scope 'visible))
#+END_SRC

Try it here with =f= followed by =;= and =,= to traverse matches:

#+BEGIN_QUOTE
Alice took up the fan and gloves, and, as the hall was very hot, she kept
fanning herself all the time she went on talking: `Dear, dear! How queer
everything is to-day! And yesterday things went on just as usual. I wonder if
I've been changed in the night? Let me think: was I the same when I got up this
morning? I almost think I can remember feeling a little different. But if I'm
not the same, the next question is, Who in the world am I? Ah, that's the great
puzzle!' And she began thinking over all the children she knew that were of the
same age as herself, to see if she could have been changed for any of them.
#+END_QUOTE

I think =avy-goto-char-2= is better though (=g s s=). Speaking of jumping
around, =SPC s s= is a fine command for invoking Swiper. Most of the times I am
looking for a file in a project, I should probably use =SPC s p= instead of
using =SPC p f=.


* Directory, buffer, window management

** Dired

#+BEGIN_SRC elisp
(after! dired
  (if (executable-find "gls")
      (progn
        (setq insert-directory-program "gls")
        (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
    (setq dired-listing-switches "-ahlF"))

  (setq ls-lisp-dirs-first t)

  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (setq dired-recursive-copies (quote always))
  (setq dired-recursive-deletes (quote top)))

(use-package dired
  :commands dired
  :ensure nil
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . hl-line-mode))
  :config
  (setq dired-listing-switches "-lat") ; sort by date (new first)
  (put 'dired-find-alternate-file 'disabled nil))

(use-package! dired-narrow
  :after dired
  :config
    (map! :map dired-mode-map
      :n  "/" 'dired-narrow-fuzzy))

(use-package! dired-open
  :after dired
  :config
  (setq open-extensions
      '(("webm" . "mpv")
        ("avi" . "mpv")
        ("mp3" . "mpv")
        ("mp4" . "mpv")
        ("m4a" . "mpv")
        ("mkv" . "mpv")
        ("ogv" . "mpv")
        ("pdf" . "zathura")))
    (setq dired-open-extensions open-extensions))

(use-package! osx-trash
  :after dired
  :if (eq system-type 'darwin)
  :init
  (osx-trash-setup))
#+END_SRC


** Treemacs

#+BEGIN_SRC elisp
(use-package! treemacs
  :commands treemacs
  :init
    (map! :leader
      (:prefix ("f" . "file")
        :desc "Open Treemacs" "t" #'+treemacs/toggle))
  :config
    (treemacs-git-mode 'extended)
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+END_SRC


* General interface and interactions

** Theme

#+BEGIN_SRC elisp
(use-package! modus-operandi-theme
  :defer t
  :init
  (setq modus-operandi-theme-scale-headings t)
  (setq modus-operandi-theme-diffs 'desaturated)
  (setq modus-operandi-theme-intense-paren-match t))
#+END_SRC

** Window splits

#+BEGIN_SRC elisp
(setq evil-vsplit-window-right t)
(setq evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-workspace-buffer))
#+END_SRC

** Outline mode

#+BEGIN_SRC elisp
(use-package bicycle
    :after outline)

(map! :map outline-minor-mode-map
    :n "<tab>" #'bicycle-cycle
    :n "<backtab>" #'bicycle-cycle-global)

(use-package prog-mode
  :config
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'prog-mode-hook 'hs-minor-mode))


(use-package! outline-minor-faces
  :after outline
  :config (add-hook 'outline-minor-mode-hook
                    'outline-minor-faces-add-font-lock-keywords))
#+END_SRC


* Applications and utilities

** Tmux

Sometimes I want to dump the current =tmux= pane into Emacs.

#+BEGIN_SRC elisp
(use-package! emacs
  :init
    (map! :leader
      (:prefix ("ø" . "utils")
        :desc "tmux buffer" "t" #'const/tmux-capture-pane))
  :config
  (setq display-line-numbers-type nil)
  (defun const/tmux-capture-pane()
    (interactive)
    (with-output-to-temp-buffer "*tmux-capture-pane*"
      (shell-command "tmux capture-pane -p -S -"
                     "*tmux-capture-pane*"
                     "*Messages*")
	(pop-to-buffer "*tmux-capture-pane*"))))
#+END_SRC


** Elfeed

I use the Doom RSS module and just set a keybinding here.

#+BEGIN_SRC elisp
(use-package! elfeed
  :commands elfeed
  :init
  (map! :leader
    (:prefix ("o" . "open")
      :desc "Open elfeed" "e" #'=rss)))
#+END_SRC


** Keycast

#+BEGIN_SRC elisp
(use-package! keycast
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast-mode-line-update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast-mode-line-update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    '(keycast-command :inherit doom-modeline-debug
                      :height 0.9)
    '(keycast-key :inherit custom-modified
                  :height 1.1
                  :weight bold)))
#+END_SRC


** Org-mode (personal information manager)

#+BEGIN_SRC elisp
(use-package! org
  :commands org-mode
  :init (setq org-directory "~/org/")
  :config
  (map! :leader
        (:prefix ("f" . "file")
         :desc "Open init.org" "o" '(lambda () (interactive) (find-file "~/org/org.org"))))
  (setq org-babel-python-command "python3")
  (setq org-bullets-bullet-list '(" "))
  (setq org-cycle-separator-lines 1)
  (setq org-edit-src-content-indentation 0)
  (setq org-ellipsis "  ")
  (setq org-export-initial-scope 'subtree)
  (setq org-image-actual-width 400)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-indented t)
  (setq org-bullets-bullet-list '("·")))
#+END_SRC

#+BEGIN_SRC elisp
(after! poetry

  (map! :map python-mode-map
        :localleader
        :desc "Activate Poetry tracking mode" "c" #'poetry-tracking-mode
        :desc "Restart LSP workspace" "r" #'lsp-workspace-restart
        :desc "Workon/off the Poetry venv" "w" #'poetry-venv-toggle
        :desc "Poetry menu" "p" #'poetry)
  (setq poetry-tracking-mode 1)
  (add-hook 'python-mode #'poetry-tracking-mode))
#+END_SRC
