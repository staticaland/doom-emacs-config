#+TITLE: Config

* Doom Emacs config
:PROPERTIES:
:EXPORT_HUGO_SECTION: docs
:EXPORT_FILE_NAME: init
:END:

** Base settings

Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).

#+BEGIN_SRC elisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC


*** Personal Information

It's useful to have some basic personal information

#+BEGIN_SRC elisp
(setq user-full-name "Anders K. Pettersen"
      user-mail-address "john@doe.com")
#+END_SRC

Line numbers...

#+BEGIN_SRC elisp
(setq display-line-numbers-type nil)
#+END_SRC


*** Modus themes

I prefer light themes when working and writing.

#+BEGIN_SRC elisp
(setq doom-theme 'modus-operandi)
#+END_SRC


*** Base typeface configurations

- https://en.wikipedia.org/wiki/Pitch_(typewriter)
- https://en.wikipedia.org/wiki/Serif

Variable pitch means that the distance between characters can vary, as opposed
to fixed pitch. The small features on the ends of strokes in some fonts are
known as serifs. It is typically what is used for printed text.

#+BEGIN_SRC elisp
(setq doom-themes-treemacs-enable-variable-pitch nil)

(when (eq system-type 'darwin)
  (setq doom-font (font-spec :family "Menlo" :size 14))
  (setq doom-big-font (font-spec :family "Menlo" :size 36))
  (setq doom-big-font-increment 4)
  (setq doom-serif-font (font-spec :family "EtBembo"))
  (setq doom-variable-pitch-font (font-spec :family "EtBembo"))
  (font-put doom-font :weight 'semi-light))
#+END_SRC

On Linux, I just go with the defaults for now.

#+BEGIN_SRC elisp
(when (eq system-type 'gnu/linux)
  (set-fontset-font t 'symbol "Noto Color Emoji" nil 'append))
#+END_SRC


** General movements and motions

*** Evil

#+BEGIN_SRC elisp
(use-package evil
  :init
  (setq evil-want-Y-yank-to-eol t))
#+END_SRC


*** Evil-snipe

[[https://www.youtube.com/watch?v=ywRExNOyybY][Zaiste Programming has a nice video about Evil-snipe]].

#+BEGIN_SRC elisp
(after! evil-snipe
  (setq evil-snipe-scope 'visible))
#+END_SRC

Try it here with =f= followed by =;= and =,= to traverse matches:

#+BEGIN_QUOTE
Alice took up the fan and gloves, and, as the hall was very hot, she kept
fanning herself all the time she went on talking: `Dear, dear! How queer
everything is to-day! And yesterday things went on just as usual. I wonder if
I've been changed in the night? Let me think: was I the same when I got up this
morning? I almost think I can remember feeling a little different. But if I'm
not the same, the next question is, Who in the world am I? Ah, that's the great
puzzle!' And she began thinking over all the children she knew that were of the
same age as herself, to see if she could have been changed for any of them.
#+END_QUOTE

I think =avy-goto-char-2= is better though (=g s s=). Speaking of jumping
around, =SPC s s= is a fine command for invoking Swiper. Most of the times I am
looking for a file in a project, I should probably use =SPC s p= instead of
using =SPC p f=.


** Directory, buffer, window management

*** Projectile project management

I want to always create a new (or matching existing) project when switching to a
project.

I also want to ignore the package repositories cloned by =straight.el=. Having a
lot of projects seem to slow down Emacs.

#+BEGIN_SRC elisp
(after! projectile
  (setq +workspaces-on-switch-project-behavior t)

  (setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
  (defun projectile-ignored-project-function (filepath)
      "Return t if FILEPATH is within any of `projectile-ignored-projects'"
      (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects))))
#+END_SRC


*** Dired file explorer

#+BEGIN_SRC elisp
(after! dired

  (add-hook! 'dired-mode-hook 'dired-hide-details-mode)
  (add-hook! 'dired-mode-hook 'hl-line-mode)

  (if (executable-find "gls")
      (progn
        (setq insert-directory-program "gls")
        (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
    (setq dired-listing-switches "-ahlF"))

  (setq ls-lisp-dirs-first t)

  (setq dired-listing-switches "-lat") ; sort by date (new first)
  (put 'dired-find-alternate-file 'disabled nil)

  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (setq dired-recursive-copies (quote always))
  (setq dired-recursive-deletes (quote top)))

(use-package! dired-narrow
  :after dired
  :config
    (map! :map dired-mode-map
      :n  "/" 'dired-narrow-fuzzy))

(use-package! dired-open
  :after dired
  :config
  (setq open-extensions
      '(("webm" . "mpv")
        ("avi" . "mpv")
        ("mp3" . "mpv")
        ("mp4" . "mpv")
        ("m4a" . "mpv")
        ("mkv" . "mpv")
        ("ogv" . "mpv")
        ("pdf" . "zathura")))
    (setq dired-open-extensions open-extensions))
#+END_SRC


*** Treemacs file tree

#+BEGIN_SRC elisp
(use-package! treemacs
  :commands treemacs
  :init
    (map! :leader
      (:prefix ("f" . "file")
        :desc "Open Treemacs" "t" #'+treemacs/toggle))
  :config
  (treemacs-git-mode 'extended)
  (setq treemacs-is-never-other-window nil)
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+END_SRC


** General interface and interactions

*** Font locks and faces

Working with faces...

#+BEGIN_SRC elisp :tangle no :results silent
(set-face-attribute 'cursor nil :background "red")
#+END_SRC


*** Theme

#+BEGIN_SRC elisp
(use-package! modus-themes
  :init
  (setq modus-themes-scale-headings t)
  (setq modus-themes-org-blocks 'grayscale)
  (setq modus-themes-diffs 'desaturated)
  (setq modus-themes-paren-match 'intense)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))
#+END_SRC


*** Focus

Dim the font color of text in surrounding sections. I like to use this on
chaotic Terraform code.

#+begin_src elisp
(use-package focus
  :hook terraform-mode
  :config
  ;; Modes inheriting prog-mode will focus on functions.
  (add-to-list 'focus-mode-to-thing '(prog-mode . defun))
  ;; Modes inheriting text-mode will focus on sentences.
  (add-to-list 'focus-mode-to-thing '(text-mode . sentence))
  ;; Terraform
  (add-to-list 'focus-mode-to-thing '(terraform-mode . paragraph)))
#+end_src


*** Window splits

#+BEGIN_SRC elisp
(setq evil-vsplit-window-right t)
(setq evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-workspace-buffer))
#+END_SRC


*** The Mode Line

I use the =+light= Doom mode line.

*** Outline

I first learned about =outline-minor-mode= from [[https://www.youtube.com/watch?v=UHk3FbieW0w][Emacs: outline-minor-mode and
imenu]].

=imenu= is a very simple package that builds index of interesting positions in
the current buffer and presents them as a menu. You pick the item and the point
moves there. There is a built-in interface and also one in sallet, helm or
counsel.

In Doom, it is bound to =SPC s i= by default (=counsel-imenu=).

The most common way to add items to the index is by modifying
=imenu-generic-expression= which is a list of lists of the form =(GROUP-NAME
REGEX MATCH-GROUP)=. Then imenu searches for the =REGEX= and adds the
corresponding =MATCH-GROUP= and its match position to the index. This is done by
=imenu-default-create-index-function= which is the default value of
=imenu-create-index-function=.

https://tychoish.com/post/imenu-for-markdown-and-writing/

The form is =(nil "regex" 1)=.

In Python, PEP8 style guidelines recommend two lines between functions (see
[[https://www.python.org/dev/peps/pep-0008/#blank-lines][blank lines]]). I agree that this makes the code easier to navigate (with the
eyes). Therefore it makes little sense for =outline-minor-mode= to remove this
spacing. By setting =outline-blank-line= to non-nil I get at least one line of
space between the headings. I do not know how to add more space.

#+BEGIN_SRC elisp
(use-package outshine)

(use-package! outline
  :config
  (setq outline-blank-line t))

(use-package! outline-minor-faces
  :after outline
  :config (add-hook 'outline-minor-mode-hook
                    'outline-minor-faces-add-font-lock-keywords))

(use-package backline
  :after outline
  :config (advice-add 'outline-flag-region :after 'backline-update))
#+END_SRC

Related concepts:

- Code readability
- [[https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two][The Magical Number Seven, Plus or Minus Two - Wikipedia]]

#+BEGIN_QUOTE
The number of objects an average human can hold in short-term memory is 7 ± 2
#+END_QUOTE

Finally, =pretty-outlines= for prettier ellipses. I did not get the pretty
bullets working. Some variants I have tried:

| Symbol | Description                                      |
|--------+--------------------------------------------------|
| +      | Plus                                             |
| •      | Bullet                                           |
| …      | Horizontal ellipsis                              |
| ↴      | Rightwards arrow with corner downwards           |
| ⋯      | Midline horizontal ellipsis                      |
| ▾      | Black down-pointing small triangle               |
| ▿      | White down-pointing small triangle               |
| ◦      | White bullet                                     |
| ⤵      | Arrow pointing rightwards then curving downwards |
| ⤷      | Arrow pointing downwards then curving rightwards |
| ⤸      | Right-side arc clockwise arrow                   |
| ⬎      | Rightwards arrow with tip downwards              |
|       | Lightning                                        |

https://github.com/integral-dw/org-superstar-mode#where-do-i-find-utf8-bullets-to-use

#+BEGIN_SRC elisp
(use-package! pretty-outlines
  :config
  (setq pretty-outlines-ellipsis " ↴")
  ;; (setq pretty-outlines-bullets-bullet-list '("⁖"))
  :hook (outline-minor-mode . pretty-outlines-set-display-table))
#+END_SRC


**** Bicycle

Bicycle provides commands for cycling the visibility of outline sections and
code blocks.

#+BEGIN_SRC elisp
(use-package! bicycle
  :config
  (map! :map outline-minor-mode-map
        :n "<tab>" #'bicycle-cycle
        :n "<backtab>" #'bicycle-cycle-global))
#+END_SRC

By running =M-x macrostep-expand= over the =map!= call you will get this:

#+BEGIN_SRC elisp :tangle no
(general-define-key :states 'normal :keymaps
		    '(outline-minor-mode-map)
		    "<tab>"
		    (function bicycle-cycle)
		    "<backtab>"
		    (function bicycle-cycle-global))
#+END_SRC

Proving that the =map!= macro is syntactic sugar for =general.el= (see
[[https://github.com/joddie/macrostep][macrostep]]). Also see [[https://github.com/hlissner/doom-emacs/blob/develop/docs/contributing.org#doom-naming-conventions][Doom naming conventions]] for rationale behind the use of the
exclamation point.

**** Outline for Python code

Here I set up a =outline-regexp= for =python-mode=.

A great tip for =rx= is to place the cursor at the last parenthesis and do =C-x
C-e= (=eval-last-sexp=) to see what regex is being produced. To get Perl
Compatible Regular Expressions you can do =counsel--elisp-to-pcre= on the regex
string. Now you can explore it with [[https://regex101.com][regex101.com]]. In the same vein, [[https://github.com/joddie/pcre2el][pcre2el]] is
probably worth checking out.

#+BEGIN_SRC elisp
(add-hook 'outline-minor-mode-hook
          (defun contrib/outline-overview ()
              (outline-show-all)
              (outline-hide-body)))

(add-hook 'org-src-mode-hook
          (defun const/show-all-outlines-in-org-src ()
            (outline-show-all)))

(defun python-mode-outline-hook ()
  "Fold only definitions in Python."
  (setq-local outline-regexp
        (rx (or
             ;; Definitions
             (group (group (* space)) bow (or "class" "def" "async") eow)

             ;; Decorators
             (group (group (* space)) "@"))))
  (outline-minor-mode))

(add-hook 'python-mode-hook 'python-mode-outline-hook)
#+END_SRC

=outline-mode= needs some way to know what a heading looks like. It uses
=outline-regexp= for this. At this point it does not know the level of the
heading. The default behaviour is either to look at the length of the
=outline-regexp= match, or an association in =outline-heading-alist=. You can
override the logic by setting =outline-level= to a function that returns a
integer based on your calculation of choice. You can also set
=outline-heading-alist= to whatever you'd like. For example:

#+BEGIN_SRC elisp :tangle no
(setq outline-heading-alist
      '(("@chapter" . 2) ("@section" . 3) ("@subsection" . 4)
        ("@subsubsection" . 5)
        ("@unnumbered" . 2) ("@unnumberedsec" . 3)
        ("@unnumberedsubsec" . 4)  ("@unnumberedsubsubsec" . 5)
        ("@appendix" . 2) ("@appendixsec" . 3)...
        ("@appendixsubsec" . 4) ("@appendixsubsubsec" . 5) ..))
#+END_SRC

I have used this for my Cloud Custodian config below.

Since the Python regex accounts for whitespace at the beginning of the line, the
level will be set accordingly.

If Outline should cover 100% of Python, it would need more work. If you define a
variable after a function, the variable would be nested under the function, even
though it is not a part of the function:

#+BEGIN_SRC python :tangle no
def something():
    print("hello")

some_variable = "hi"
#+END_SRC

However, I find the benefits outweigh the drawbacks.

**** Outline for Terraform

Terraform is a declarative configuratiion language for cloud resources - you
write down what you want and Terraform performs the correct API calls.

For =terraform-mode= I have decided to use a function that always returns
level 1. If you do not do this, you may find that some blocks get nested in a
way that doesn't make sense.

#+BEGIN_SRC elisp
(defun terraform-mode-outline-hook ()
  (setq-local outline-regexp (rx
                        (or "resource" "data" "provider" "module" "variable" "output")
                        (one-or-more (not "{"))
                        "{"
                        line-end))
  (defun terraform-outline-level () 1)
  (setq-local outline-level 'terraform-outline-level)
  (outline-minor-mode t))


(add-hook 'terraform-mode-hook 'terraform-mode-outline-hook)
#+END_SRC

The regular expression for Terraform looks like this:

#+BEGIN_SRC elisp :tangle no :exports both
(counsel--elisp-to-pcre (rx
 (or "resource" "data" "provider" "module" "variable" "output")
 (one-or-more (not "{"))
 "{"
 line-end))
#+END_SRC

#+RESULTS:
: (?:data|module|output|provider|(?:resourc|variabl)e)[^{]+{$

Or:

#+BEGIN_SRC elisp
(rxt-elisp-to-pcre (rx
 (or "resource" "data" "provider" "module" "variable" "output")
 (one-or-more (not "{"))
 "{"
 line-end))
#+END_SRC

#+RESULTS:
: (?:data|module|output|provider|(?:resourc|variabl)e)[^{]+\{$

**** Outline for Cloud Custodian policy files

Low effort solution that gets the job done.

#+BEGIN_SRC elisp
(defun c7n-outline-hook ()
  (setq-local outline-heading-alist '(("policies:" . 1)
                                ("- name:" . 2)))
  (setq-local outline-regexp (rx (or "policies:" "- name:")))
  (outline-minor-mode))

(add-hook 'yaml-mode-hook 'c7n-outline-hook)
#+END_SRC

**** Outline for Terragrunt (HCL) files

Another low effort solution that gets the job done.

#+BEGIN_SRC elisp
(defun terragrunt-outline-hook ()
  (setq-local outline-regexp "^in")
  (outline-minor-mode))

(add-hook 'hcl-mode-hook 'terragrunt-outline-hook)
#+END_SRC


*** Olivetti mode

Olivetti is a Italian manufacturer of typewriters, so I suppose the goal of
=olivetti= is to capture the feeling of typing on one.

#+BEGIN_SRC elisp
(use-package! olivetti
  :init
  (setq-default olivetti-body-width 0.618)
  :commands olivetti-mode)
#+END_SRC

About the value chosen for =olivetti-body-width=:

#+BEGIN_QUOTE
The first known decimal approximation of the (inverse) golden ratio was stated
as "about 0.6180340" in 1597 by Michael Maestlin of the University of Tübingen
in a letter to Kepler, his former student.
#+END_QUOTE

About the use of =setq-default=:

#+BEGIN_QUOTE
You can set any Lisp variable with setq, but with certain variables setq won't
do what you probably want in the .emacs file. Some variables automatically
become buffer-local when set with setq; what you want in .emacs is to set the
default value, using setq-default.
#+END_QUOTE


** Applications and utilities

*** Occur mode

#+BEGIN_SRC elisp
(use-package! replace
  :init
    (map! :map occur-mode-map
      :n  "e" 'occur-edit-mode)

  (add-hook 'occur-hook
          '(lambda ()
             (switch-to-buffer-other-window "*Occur*"))))
#+END_SRC


*** Characters

#+BEGIN_SRC elisp
(use-package emacs
  :config
  ;; Got those numbers from `string-to-char'
  (defconst contrib/insert-pair-alist
    '(("' Single quote" . (39 39))           ; ' '
      ("« Εισαγωγικά Gr quote" . (171 187))  ; « »
      ("\" Double quotes" . (34 34))         ; " "
      ("` Elisp quote" . (96 39))            ; ` '
      ("‘ Single apostrophe" . (8216 8217))  ; ‘ ’
      ("“ Double apostrophes" . (8220 8221)) ; “ ”
      ("( Parentheses" . (40 41))            ; ( )
      ("{ Curly brackets" . (123 125))       ; { }
      ("[ Square brackets" . (91 93))        ; [ ]
      ("< Angled brackets" . (60 62))        ; < >
      ("= Equals signs" . (61 61))           ; = =
      ("* Asterisks" . (42 42))              ; * *
      ("_ underscores" . (95 95)))           ; _ _
    "Alist of pairs for use with `prot/insert-pair-completion'.")

  (defun contrib/insert-pair-completion (&optional arg)
    "Insert pair from `contrib/insert-pair-alist'."
    (interactive "P")
    (let* ((data contrib/insert-pair-alist)
           (chars (mapcar #'car data))
           (choice (completing-read "Select character: " chars nil t))
           (left (cadr (assoc choice data)))
           (right (caddr (assoc choice data))))
      (insert-pair arg left right))))
#+END_SRC


*** Gnus

#+BEGIN_SRC elisp
(after! gnus
  (setq gnus-select-method '(nntp "news.gwene.org")))
#+END_SRC


*** Tmux

Sometimes I want to dump the current =tmux= pane into Emacs.

#+BEGIN_SRC elisp
(use-package! emacs
  :init
    (map! :leader
      (:prefix ("ø" . "utils")
        :desc "tmux buffer" "t" #'const/tmux-capture-pane))
  :config
  (setq display-line-numbers-type nil)
  (defun const/tmux-capture-pane()
    (interactive)
    (with-output-to-temp-buffer "*tmux-capture-pane*"
      (shell-command "tmux capture-pane -p -S -"
                     "*tmux-capture-pane*"
                     "*Messages*")
	(pop-to-buffer "*tmux-capture-pane*"))))
#+END_SRC


#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("f" . "file")
       :desc "tmux cd to here" "T" #'+tmux/cd-to-here))
#+END_SRC


*** Elfeed 🗞️

I use the Doom RSS module and just set some keybinds here. I opt for =SPC m r=
for =elfeed-update= which is a pleasing left, right, left key sequence. Yes, I
press =SPC= with my left thumb.

#+BEGIN_SRC elisp
(use-package! elfeed
  :commands elfeed
  :init
  (map! :leader
    (:prefix ("o" . "open")
      :desc "Open elfeed" "e" #'=rss)))

(after! elfeed
  (map! :map elfeed-search-mode-map
        :localleader
        :desc "Elfeed update" "r" #'elfeed-update))

(use-package elfeed-web
    :defer t
    :commands elfeed-web-stop)
#+END_SRC


*** Keycast ⌨️

#+BEGIN_SRC elisp
(use-package! keycast
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast-mode-line-update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast-mode-line-update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    '(keycast-command :inherit doom-modeline-debug
                      :height 0.9)
    '(keycast-key :inherit custom-modified
                  :height 1.1
                  :weight bold)))
#+END_SRC


*** Regular expressions: re-builder 🐕

Rex the dog...

#+BEGIN_SRC elisp
(use-package re-builder
  :config
  (setq reb-re-syntax 'string))
#+END_SRC

Visual regex:

#+BEGIN_SRC elisp
(use-package visual-regexp
  :commands vr/query-replace
  :config
  (setq vr/default-replace-preview nil)
  (setq vr/match-separator-use-custom-face t))
#+END_SRC


*** Emoji cheat sheet

#+BEGIN_SRC elisp
(use-package emoji-cheat-sheet-plus
  :commands emoji-cheat-sheet-plus-insert)
#+END_SRC

#+BEGIN_SRC elisp
(use-package ivy-emoji
  :commands ivy-emoji)
#+END_SRC


*** Org-mode (personal information manager) 📔

Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

I have these feature flags enabled:

- =+hugo= :: For exporting my blog from Org to Hugo flavoured markdown
- =+pretty= :: Mainly for pretty headings
- =+journal= :: For daily journals saved to =~/org/journal= with one file for
  each day
- =+roam= :: For Zettelkasten style note taking
- =+present= :: For making =reveal.js= presentations from Org documents
- I want to use https://sandyuraz.com/articles/orgmode-css/ (see https://news.ycombinator.com/item?id=23130104)

#+BEGIN_SRC elisp
(after! org-journal (setq org-journal-file-format "%Y%m%d.org"))
#+END_SRC

First I set my =org-directory= and bind =SPC f o= to open my main Org-mode file.

#+BEGIN_SRC elisp
(setq org-directory "~/org/")

(map! :leader
    (:prefix ("f" . "file")
     :desc "Open init.org" "o" '(lambda () (interactive) (find-file "~/org/org.org"))))
#+END_SRC

- Use =mixed-pitch-mode= by default
- Use =olivetti-mode= by default
- Show at least one line break between headings
- Never indent SRC blocks

#+BEGIN_SRC elisp
(after! org
    (setq org-imenu-depth 7)
  (setq org-ellipsis " ▾ ")
  (setq org-superstar-headline-bullets-list '("⁖"))
  (add-hook! 'org-mode-hook #'mixed-pitch-mode)
  (add-hook! 'org-mode-hook #'olivetti-mode)
  (setq org-babel-python-command "python3")
  (setq org-cycle-separator-lines 1)
  (setq org-edit-src-content-indentation 0)
  (setq org-export-initial-scope 'subtree)
  (setq org-image-actual-width 400)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-indented t))
#+END_SRC

Org-capture templates from Protesilaos Stavrou be serving me well.

A quoted list of lists:

1. The key
2. The description
3. The type of entry (a symbol)
   - =entry= :: An Org mode node, with a headline. Will be filed as the child of the target
     entry or as a top-level entry. The target file should be an Org file.
4. The target
   - Like =file+headline=
5. The template

If you say =file+headline= you would give it a filename and a headline to put
the template under.

#+BEGIN_SRC elisp
(after! org-capture
  (setq org-capture-templates
        '(("b" "Basic task for future review" entry
           (file+headline "tasks.org" "Basic tasks that need to be reviewed")
           "* %^{Title}\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%l"
           :empty-lines 1)

          ("w" "Work")
          ("wt" "Task or assignment" entry
           (file+headline "work.org" "Tasks and assignments")
           "\n\n* TODO [#A] %^{Title} :@work:\nSCHEDULED: %^t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("wm" "Meeting, event, appointment" entry
           (file+headline "work.org" "Meetings, events, and appointments")
           "\n\n* MEET [#A] %^{Title} :@work:\nSCHEDULED: %^T\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("t" "Task with a due date" entry
           (file+headline "tasks.org" "Task list with a date")
           "\n\n* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\nSCHEDULED: %^t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("j" "Journal" entry
           (file+olp+datetree "journal.org")
           "* %?\n"
           :empty-lines 1)

          ("r" "Reply to an email" entry
           (file+headline "tasks.org" "Mail correspondence")
           "\n\n* TODO [#B] %:subject :mail:\nSCHEDULED: %t\n:PROPERTIES:\n:CONTEXT: %a\n:END:\n\n%i%?"
           :empty-lines 1)))

  (defun org-hugo-new-subtree-post-capture-template ()
      (let* ((title (read-from-minibuffer "Post Title: "))
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h" "Hugo blog post" entry
                 (file "~/Projects/org-blog/blog.org")
                 (function org-hugo-new-subtree-post-capture-template)
                 :empty-lines 1)))
#+END_SRC

The org-roam capture template:

#+begin_src elisp
(use-package! org-roam
  :config
  (push 'company-capf company-backends)
  (setq org-roam-completion-everywhere t)
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam-capture--get-point)
        "%?"
        :file-name "${slug}"
        :head "#+title: ${title}\n"
        :unnarrowed t))))
#+end_src

#+begin_src elisp
(use-package company
  :config
  (setq company-idle-delay 0.2)
  (setq company-minimum-prefix-length 3))
#+end_src

** Languages 💬

*** Flycheck

#+BEGIN_SRC elisp
(after! flycheck
  (add-to-list 'flycheck-checkers 'terraform-tflint)
  (add-to-list 'flycheck-checkers 'terraform))
#+END_SRC


*** Terraform

Snippets.

#+BEGIN_SRC elisp
(after! yasnippet
  (add-to-list 'yas-snippet-dirs
               (concat
                (file-name-as-directory straight-base-dir)
                (file-name-as-directory "straight")
                (file-name-as-directory "build")
                (file-name-as-directory "yasnippet-terraform/terraform-mode"))))
#+END_SRC


*** Python 🐍

I don't understand why setting the right virtual environment is not a common use
case for people using =lsp-mode=. Anyway, I use =poetry= and enable
=poetry-tracking-mode= which will set the correct environment right before
starting =lsp-mode=. The function goes at the front of the hook list.

I also add some Poetry commands to the local leader of =python-mode=. It's nice
to be in control of the LSP beast.

There's some other ways to set the virtual environment:

- =poetry-venv-toggle=
- =pyvenv-activate=

You must run =lsp-workspace-restart= for changes to take effect.

#+BEGIN_SRC elisp
(add-hook! 'python-mode-hook 'poetry-tracking-mode)

(after! poetry
  (setq poetry-tracking-strategy 'projectile)
  (map! :map python-mode-map
        :localleader
        :desc "Activate Poetry tracking mode" "c" #'poetry-tracking-mode
        :desc "Restart LSP workspace" "r" #'lsp-workspace-restart
        :desc "Workon/off the Poetry venv" "w" #'poetry-venv-toggle
        :desc "Poetry menu" "p" #'poetry))
#+END_SRC

Actually, the logic for choosing a virtual environment depends on which language
server you use. Consider =lsp-pyright-locate-venv= in [[https://github.com/emacs-lsp/lsp-pyright/blob/master/lsp-pyright.el#L152-L158][lsp-pyright.el]]. Now what
is the point of that?

The Spacemacs Python layer seems very nice - [[https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Blang/python][take a look at the Spacemacs Python
layer]] and [[https://www.youtube.com/watch?v=r-BHx7VNX5s][Python Development in Spacemacs - YouTube]].


** Keybindings

In this section I will plan out my keybinding strategy. The current one looks like this:

#+BEGIN_SRC elisp :tangle no
(after! elfeed
  (map! :map elfeed-search-mode-map
        :localleader
        :desc "Elfeed update" "r" #'elfeed-update))
#+END_SRC

[[https://github.com/hlissner/doom-emacs/issues/814][Inspired by issue 814]].

[[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs - Mastering Emacs ]]

=general-override-mode-map= is a minor mode map that will take precedence over
all maps. The alias is =:override=.

https://github.com/noctuid/general.el#override-keymaps-and-buffer-local-keybindings

https://github.com/hlissner/doom-emacs/issues?q=override+label%3Are%3Akeybinds

#+BEGIN_QUOTE
Hi! Thanks for the PR but I cannot accept it. It is redundant with hideshow which the :editor fold module configures, and will handle folding lisp blocks, while outline-minor-mode is relegated to handling comment headings, and vimish-fold for arbitrary folds.
#+END_QUOTE
