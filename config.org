#+TITLE: Config

* Doom Emacs config
:PROPERTIES:
:EXPORT_HUGO_SECTION: docs
:EXPORT_FILE_NAME: init
:END:

** Base settings

Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).

#+BEGIN_SRC elisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC


*** Personal Information

It's useful to have some basic personal information

#+BEGIN_SRC elisp
(setq user-full-name "Anders K. Pettersen"
      user-mail-address "john@doe.com")
#+END_SRC

What Doom wants me to set.

#+BEGIN_SRC elisp
(setq doom-theme 'modus-operandi)

(setq display-line-numbers-type nil)

(setq doom-theme 'doom-one)
#+END_SRC


*** Base typeface configurations

#+BEGIN_SRC elisp
(setq doom-themes-treemacs-enable-variable-pitch nil)

(when (string= (system-name) "Anderss-MacBook-Pro.local")
  (setq doom-font (font-spec :family "Menlo"))
  (setq doom-serif-font (font-spec :family "Menlo" :height 1.0))
  (setq doom-variable-pitch-font (font-spec :family "EtBembo" :height 1.0))
    (setq doom-big-font-increment 4)
  (font-put doom-font :weight 'semi-light))
#+END_SRC


** General movements and motions

*** Evil

#+BEGIN_SRC elisp
(use-package evil
  :init
  (setq evil-want-Y-yank-to-eol t))
#+END_SRC


*** Evil-snipe

[[https://www.youtube.com/watch?v=ywRExNOyybY][Zaiste Programming has a nice video about Evil-snipe]].

#+BEGIN_SRC elisp
(after! evil-snipe
  (setq evil-snipe-scope 'visible))
#+END_SRC

Try it here with =f= followed by =;= and =,= to traverse matches:

#+BEGIN_QUOTE
Alice took up the fan and gloves, and, as the hall was very hot, she kept
fanning herself all the time she went on talking: `Dear, dear! How queer
everything is to-day! And yesterday things went on just as usual. I wonder if
I've been changed in the night? Let me think: was I the same when I got up this
morning? I almost think I can remember feeling a little different. But if I'm
not the same, the next question is, Who in the world am I? Ah, that's the great
puzzle!' And she began thinking over all the children she knew that were of the
same age as herself, to see if she could have been changed for any of them.
#+END_QUOTE

I think =avy-goto-char-2= is better though (=g s s=). Speaking of jumping
around, =SPC s s= is a fine command for invoking Swiper. Most of the times I am
looking for a file in a project, I should probably use =SPC s p= instead of
using =SPC p f=.


** Directory, buffer, window management

*** Projectile project management

I want to always create a new (or matching existing) project when switching to a
project.

I also want to ignore the package repositories cloned by =straight.el=. Having a
lot of projects seem to slow down Emacs.

#+BEGIN_SRC elisp
(after! projectile
  (setq +workspaces-on-switch-project-behavior t)

  (setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
  (defun projectile-ignored-project-function (filepath)
      "Return t if FILEPATH is within any of `projectile-ignored-projects'"
      (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects))))
#+END_SRC


*** Dired file explorer

#+BEGIN_SRC elisp
(after! dired

  (add-hook! 'dired-mode-hook 'dired-hide-details-mode)
  (add-hook! 'dired-mode-hook 'hl-line-mode)

  (if (executable-find "gls")
      (progn
        (setq insert-directory-program "gls")
        (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
    (setq dired-listing-switches "-ahlF"))

  (setq ls-lisp-dirs-first t)

  (setq dired-listing-switches "-lat") ; sort by date (new first)
  (put 'dired-find-alternate-file 'disabled nil)

  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (setq dired-recursive-copies (quote always))
  (setq dired-recursive-deletes (quote top)))

(use-package! dired-narrow
  :after dired
  :config
    (map! :map dired-mode-map
      :n  "/" 'dired-narrow-fuzzy))

(use-package! dired-open
  :after dired
  :config
  (setq open-extensions
      '(("webm" . "mpv")
        ("avi" . "mpv")
        ("mp3" . "mpv")
        ("mp4" . "mpv")
        ("m4a" . "mpv")
        ("mkv" . "mpv")
        ("ogv" . "mpv")
        ("pdf" . "zathura")))
    (setq dired-open-extensions open-extensions))
#+END_SRC


*** Treemacs file tree

#+BEGIN_SRC elisp
(use-package! treemacs
  :commands treemacs
  :init
    (map! :leader
      (:prefix ("f" . "file")
        :desc "Open Treemacs" "t" #'+treemacs/toggle))
  :config
    (treemacs-git-mode 'extended)
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+END_SRC


** General interface and interactions

*** Font locks and faces

Working with faces...

#+BEGIN_SRC elisp :tangle no :results silent
(set-face-attribute 'cursor nil :background "red")
#+END_SRC


*** Theme

#+BEGIN_SRC elisp
(use-package! modus-operandi-theme
  :defer t
  :init
  (setq modus-operandi-theme-scale-headings t)
  (setq modus-operandi-theme-diffs 'desaturated)
  (setq modus-operandi-theme-intense-paren-match t))
#+END_SRC


*** Window splits

#+BEGIN_SRC elisp
(setq evil-vsplit-window-right t)
(setq evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-workspace-buffer))
#+END_SRC


*** Outline mode

I learned about =outline-minor-mode= from [[https://www.youtube.com/watch?v=UHk3FbieW0w][Emacs: outline-minor-mode and imenu]].

#+BEGIN_SRC elisp
(use-package! bicycle
    :after outline)

(map! :map outline-minor-mode-map
    :n "<tab>" #'bicycle-cycle
    :n "<backtab>" #'bicycle-cycle-global)
#+END_SRC

In Python, PEP8 style guidelines recommend two lines between functions (see
[[https://www.python.org/dev/peps/pep-0008/#blank-lines][blank lines]]). I agree that this makes the code easier to navigate (with the
eyes). Therefore it makes little sense for =outline-minor-mode= to remove this
spacing. By setting =outline-blank-line= to non-nil I get at least one line of
space between the headings. I do not know how to add more space.

#+BEGIN_SRC elisp
(setq outline-blank-line t)

(after! prog-mode
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'prog-mode-hook 'hs-minor-mode))

(use-package! outline-minor-faces
  :after outline
  :config (add-hook 'outline-minor-mode-hook
                    'outline-minor-faces-add-font-lock-keywords))

(add-hook 'outline-minor-mode-hook
          (defun contrib/outline-overview ()
            "Show only outline headings."
            (outline-show-all)
            (outline-hide-body)))

(add-hook 'python-mode-hook
        (defun contrib/outline-python ()
            "Fold only definitions in Python."
            (setq outline-regexp
                  (rx (or
                       ;; Definitions
                       (group (group (* space)) bow (or "class" "def" "async") eow)

                       ;; Decorators
                       (group (group (* space)) "@"))))
            (contrib/outline-overview)))
#+END_SRC


*** Olivetti mode

Olivetti is a Italian manufacturer of typewriters. The goal of this package is
to recreate the feeling of writing on a typewriter.

#+BEGIN_SRC elisp
(use-package! olivetti
  :config (setq olivetti-body-width 0.618)
  :commands olivetti-mode)
#+END_SRC


** Applications and utilities

*** Gnus

#+BEGIN_SRC elisp
(after! gnus
  (setq gnus-select-method '(nntp "news.gwene.org")))
#+END_SRC


*** Tmux

Sometimes I want to dump the current =tmux= pane into Emacs.

#+BEGIN_SRC elisp
(use-package! emacs
  :init
    (map! :leader
      (:prefix ("Ã¸" . "utils")
        :desc "tmux buffer" "t" #'const/tmux-capture-pane))
  :config
  (setq display-line-numbers-type nil)
  (defun const/tmux-capture-pane()
    (interactive)
    (with-output-to-temp-buffer "*tmux-capture-pane*"
      (shell-command "tmux capture-pane -p -S -"
                     "*tmux-capture-pane*"
                     "*Messages*")
	(pop-to-buffer "*tmux-capture-pane*"))))
#+END_SRC


*** Elfeed

I use the Doom RSS module and just set some keybinds here. I opt for =SPC m r=
for =elfeed-update= which is a pleasing left, right, left key sequence. Yes, I
press =SPC= with my left thumb.

#+BEGIN_SRC elisp
(use-package! elfeed
  :commands elfeed
  :init
  (map! :leader
    (:prefix ("o" . "open")
      :desc "Open elfeed" "e" #'=rss)))

(after! elfeed
  (map! :map elfeed-search-mode-map
        :localleader
        :desc "Elfeed update" "r" #'elfeed-update))
#+END_SRC


*** Keycast

#+BEGIN_SRC elisp
(use-package! keycast
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast-mode-line-update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast-mode-line-update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    '(keycast-command :inherit doom-modeline-debug
                      :height 0.9)
    '(keycast-key :inherit custom-modified
                  :height 1.1
                  :weight bold)))
#+END_SRC


*** Org-mode (personal information manager)

Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

I have these feature flags enabled:

- =+hugo= :: For exporting my blog from Org to Hugo flavoured markdown
- =+pretty= :: Mainly for pretty headings
- =+journal= :: For daily journals saved to =~/org/journal= with one file for
  each day
- =+roam= :: For Zettelkasten style note taking
- =+present= :: For making =reveal.js= presentations from Org documents
- I want to use https://sandyuraz.com/articles/orgmode-css/ (see https://news.ycombinator.com/item?id=23130104)

#+BEGIN_SRC elisp
(after! org-journal (setq org-journal-file-format "%Y%m%d.org"))
#+END_SRC

First I set my =org-directory= and bind =SPC f o= to open my main Org-mode file.

#+BEGIN_SRC elisp
(setq org-directory "~/org/")

(map! :leader
    (:prefix ("f" . "file")
     :desc "Open init.org" "o" '(lambda () (interactive) (find-file "~/org/org.org"))))
#+END_SRC

- Use =mixed-pitch-mode= by default
- Show at least one line break between headings
- Never indent SRC blocks

#+BEGIN_SRC elisp
(after! org
  (add-hook! 'org-mode-hook #'mixed-pitch-mode)
  (setq org-babel-python-command "python3")
  (setq org-cycle-separator-lines 1)
  (setq org-edit-src-content-indentation 0)
  (setq org-export-initial-scope 'subtree)
  (setq org-image-actual-width 400)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-indented t))
#+END_SRC

Org-capture templates from Protesilaos Stavrou be serving me well.

A quoted list of lists:

1. The key
2. The description
3. The type of entry (a symbol)
   - =entry= :: An Org mode node, with a headline. Will be filed as the child of the target
     entry or as a top-level entry. The target file should be an Org file.
4. The target
   - Like =file+headline=
5. The template

If you say =file+headline= you would give it a filename and a headline to put
the template under.

#+BEGIN_SRC elisp
(after! org-capture
  (setq org-capture-templates
        '(("b" "Basic task for future review" entry
           (file+headline "tasks.org" "Basic tasks that need to be reviewed")
           "* %^{Title}\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%l"
           :empty-lines 1)

          ("w" "Work")
          ("wt" "Task or assignment" entry
           (file+headline "work.org" "Tasks and assignments")
           "\n\n* TODO [#A] %^{Title} :@work:\nSCHEDULED: %^t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("wm" "Meeting, event, appointment" entry
           (file+headline "work.org" "Meetings, events, and appointments")
           "\n\n* MEET [#A] %^{Title} :@work:\nSCHEDULED: %^T\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("t" "Task with a due date" entry
           (file+headline "tasks.org" "Task list with a date")
           "\n\n* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\nSCHEDULED: %^t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("j" "Journal" entry
           (file+olp+datetree "journal.org")
           "* %?\n"
           :empty-lines 1)

          ("r" "Reply to an email" entry
           (file+headline "tasks.org" "Mail correspondence")
           "\n\n* TODO [#B] %:subject :mail:\nSCHEDULED: %t\n:PROPERTIES:\n:CONTEXT: %a\n:END:\n\n%i%?"
           :empty-lines 1)))

  (defun org-hugo-new-subtree-post-capture-template ()
      (let* ((title (read-from-minibuffer "Post Title: "))
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h" "Hugo blog post" entry
                 (file "~/Projects/org-blog/blog.org")
                 (function org-hugo-new-subtree-post-capture-template)
                 :empty-lines 1)))
#+END_SRC


** Languages

*** Python

I don't understand why setting the right virtual environment is not a common use
case for people using =lsp-mode=. Anyway, I use =poetry= and enable
=poetry-tracking-mode= which will set the correct environment right before
starting =lsp-mode=. The function goes at the front of the hook list.

I also add some Poetry commands to the local leader of =python-mode=. It's nice
to be in control of the LSP beast.

There's some other ways to set the virtual environment:

- =poetry-venv-toggle=
- =pyvenv-activate=

You must run =lsp-workspace-restart= for changes to take effect.

#+BEGIN_SRC elisp
(add-hook! 'python-mode-hook 'poetry-tracking-mode)

(after! poetry
  (setq poetry-tracking-strategy 'projectile)
  (map! :map python-mode-map
        :localleader
        :desc "Activate Poetry tracking mode" "c" #'poetry-tracking-mode
        :desc "Restart LSP workspace" "r" #'lsp-workspace-restart
        :desc "Workon/off the Poetry venv" "w" #'poetry-venv-toggle
        :desc "Poetry menu" "p" #'poetry))
#+END_SRC

Actually, the logic for choosing a virtual environment depends on which language
server you use. Consider =lsp-pyright-locate-venv= in [[https://github.com/emacs-lsp/lsp-pyright/blob/master/lsp-pyright.el#L152-L158][lsp-pyright.el]]. Now what
is the point of that?

The Spacemacs Python layer seems very nice - https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Blang/python

https://www.youtube.com/watch?v=r-BHx7VNX5s
