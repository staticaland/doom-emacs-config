#+HUGO_BASE_DIR: ./docs
#+HUGO_SECTION: ./

* Hugo

- If =HUGO_SECTION= is =blog= then the file will be placed in
  =<HUGO_BASE_DIR>/content/blog=.
- If =HUGO_SECTION= is =./= then the file will be placed in
- If =HUGO_SECTION= is unset then the file will be placed in
  =<HUGO_BASE_DIR>/content/posts/=.

* Doom Emacs config
:PROPERTIES:
:EXPORT_FILE_NAME: index
:END:

** General

#+begin_src elisp
(setq user-full-name "Anders K. Pettersen"
      user-mail-address "staticaland@users.noreply.github.com")
#+end_src


** Projectile

#+BEGIN_SRC elisp
(after! projectile
  (setq +workspaces-on-switch-project-behavior t)

  (setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
  (defun projectile-ignored-project-function (filepath)
      "Return t if FILEPATH is within any of `projectile-ignored-projects'"
      (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects))))
#+END_SRC


** CUE

#+begin_src elisp
(add-hook! cue-mode
  (cuefmt-on-save-mode))
#+end_src


** Go

#+begin_src elisp
(add-hook! go-mode
  (gofmt-on-save-mode))
#+end_src


** Terraform

#+begin_src elisp
(add-hook! terraform-mode
  (terraform-format-on-save-mode))
#+end_src


** Org

#+begin_src elisp
(after! org
  (setq org-imenu-depth 7)
  (setq org-ellipsis " ▾ ")
  (setq org-superstar-headline-bullets-list '("⁖"))
  (setq org-babel-python-command "python3")
  (setq org-cycle-separator-lines 1)
  (setq org-edit-src-content-indentation 0)
  (setq org-export-initial-scope 'subtree)
  (setq org-image-actual-width 400)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-indented t))
#+end_src

#+begin_src elisp
(use-package! ox-gfm
  :after org)
#+end_src


** Treemacs file tree

#+begin_src elisp
(use-package! treemacs
  :commands treemacs
  :init
    (map! :leader
      (:prefix ("f" . "file")
        :desc "Open Treemacs" "t" #'+treemacs/toggle))
  :config
  (treemacs-git-mode 'extended)
  (setq treemacs-is-never-other-window nil)
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+end_src


** Outline

#+begin_src elisp
(use-package! outline
  :config
  (setq outline-blank-line t))
#+end_src


** Occur

#+begin_src elisp
(use-package! replace
  :init
    (map! :map occur-mode-map
      :n  "e" 'occur-edit-mode)

  (add-hook 'occur-hook
          '(lambda ()
             (switch-to-buffer-other-window "*Occur*"))))
#+end_src


** JSON schema

#+begin_src elisp :tangle no
(setq lsp-yaml-schemas (make-hash-table))
(puthash "https://ecs-intellisense.s3-us-west-2.amazonaws.com/task-definition/schema.json" ["*ecs-task-def.json" "task-definition.json"] lsp-yaml-schemas)
#+end_src


** Modes

#+begin_src elisp
(use-package web-mode
  :mode (("\\.html$" . web-mode)
         ("\\.tmpl\\'" . web-mode)))
#+end_src

#+begin_src elisp
(add-hook! web-mode
  (prettier-on-save-mode))
#+end_src


** Various

#+begin_src elisp
(defun comment-delete (arg)
  "Delete the first comment on this line, if any.  Don't touch
the kill ring.  With prefix ARG, delete comments on that many
lines starting with this one."
  (interactive "P")
  (comment-normalize-vars)
  (dotimes (_i (prefix-numeric-value arg))
    (save-excursion
      (beginning-of-line)
      (let ((cs (comment-search-forward (line-end-position) t)))
    (when cs
      (goto-char cs)
      (skip-syntax-backward " ")
      (setq cs (point))
      (comment-forward)
      ;; (kill-region cs (if (bolp) (1- (point)) (point))) ; original
      (delete-region cs (if (bolp) (1- (point)) (point)))  ; replace kill-region with delete-region
      (indent-according-to-mode))))
    (if arg (forward-line 1))))

(defun comment-delete-dwim (beg end arg)
  "Delete comments without touching the kill ring.  With active
region, delete comments in region.  With prefix, delete comments
in whole buffer.  With neither, delete comments on current line."
  (interactive "r\nP")
  (let ((lines (cond (arg
                      (count-lines (point-min) (point-max)))
                     ((region-active-p)
                      (count-lines beg end)))))
    (save-excursion
      (when lines
        (goto-char (if arg (point-min) beg)))
      (comment-delete (or lines 1)))))
#+end_src
